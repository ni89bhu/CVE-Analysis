 $etpath = "C:\Program Files (x86)\Prism Microsystems\EventTracker"
 $sfreq = -96
 $temppath = "F:\CVE_Analysis"
 $backuppath = "F:\CVE_Analysis"
 $outputpath = "F:\CVE_Analysis"
 [int]$score = 2
 $CNAME = "Netsurion"

 ########################################################################################################################################

 #Load Dlls for EventTracker search and Microsoft mdb#
Function Invoke-MDBSQLCMD ($mdblocation,$sqlquery){
$dsn = "Provider=Microsoft.Jet.OLEDB.4.0; Data Source=$mdblocation;"
$objConn = New-Object System.Data.OleDb.OleDbConnection $dsn
$objCmd  = New-Object System.Data.OleDb.OleDbCommand $sqlquery,$objConn
$objConn.Open()
$adapter = New-Object System.Data.OleDb.OleDbDataAdapter $objCmd
$dataset = New-Object System.Data.DataSet
[void] $adapter.Fill($dataSet)
$objConn.Close()
$dataSet.Tables | Select-Object -Expand Rows
$dataSet = $null
$adapter = $null
$objCmd  = $null
$objConn = $null
}

if ($EState -eq "TRUE"){
    $logprocessdll = [System.Reflection.Assembly]::LoadFrom("$etpath\AdvancedReports\Prism.LogSearchProcess.dll")
    $logparmeterdll = [System.Reflection.Assembly]::LoadFrom("$etpath\AdvancedReports\Prism.LogSearchParameter.dll")
    $datapersist = [System.Reflection.Assembly]::LoadFrom("$etpath\AdvancedReports\Prism.Report.DataPersistance.dll")
#Perform search for event id 3208,3209 and source Eventtracker 8#
$logparmeter01 = New-Object Prism.LogSearchParameter.AdvanceParameter
$logparmeter02 = New-Object Prism.LogSearchParameter.AdvanceParameter
$logcerteria = New-Object Prism.LogSearchParameter.LogSearchParameter
$searchconfig = New-Object Prism.LogSearchParameter.SearchConfig
$searchconfig.IsParseTokens = "False"
$logcerteria.FromDate = (get-date).AddHours($SFREQ)
$logcerteria.ToDate = (get-date)
#$logcerteria.SystemGroups = "All Windows Systems"
$logcerteria.SystemIncludeType = 1
$logparmeter01.ParameterId = 0
$logparmeter01.Operator = 1
$logparmeter01.ParameterName = "EventId"
$logparmeter01.ParameterType = 1
$logparmeter01.SearchValue = "3208,3209"
$logparmeter02.ParameterId = 0
$logparmeter02.Operator = 1
$logparmeter02.ParameterName = "EventSource"
$logparmeter02.ParameterType = 1
$logparmeter02.SearchValue = "EventTracker"
$logcerteria.AdvancedParameter = $logparmeter01
$logcerteria.AdvancedParameter += $logparmeter02
$logticks = (get-date).Ticks
$mdbname1 = "CVEAnalysis_{0}" -f $logticks
$param = new-object Prism.LogSearchParameter.LogSearchParameterContext ("$mdbname1")
$param.Update($logcerteria)
$search = new-object Prism.LogSearchProcess.LogSearchProcessing ("$mdbname1")
$search.StartProcessing(4) | Out-Null
########################################################################################################################################

#Extract useful values from event_description and store in Temp folder#
$regex2 = 'Detected software \<(.*?)\> has been ((un)?installed)\s+'
Filter Extract2 {
"$_.EventDescription" -match $regex2 > $null
[pscustomobject]@{  
EventTime = $_.LogTime
SystemName = $_.Computer
UserName = $_.EventUser
UserDomain = $_.Domain
ApplicationName = ($Matches[1]).trim()
ApplicationStatus = ($Matches[2]).trim()
}}

$mdblocation1 = "$etpath\Reports\LogSearch\$mdbname1.mdb"
$query1 = ((Invoke-MDBSQLCMD $mdblocation1 -sqlquery "Select LogTime,Computer,EventUser,Domain,EventDescription from Events" | Extract2))
$result = ($query1 | Select-Object -Property EventTime,SystemName,UserName,UserDomain,ApplicationName,ApplicationStatus) 
}
elseif ($NState -eq "TRUE"){
    $logprocessdll = [System.Reflection.Assembly]::LoadFrom("$etpath\AdvancedReports\EventTracker.LogSearchProcess.dll")
    $logparmeterdll = [System.Reflection.Assembly]::LoadFrom("$etpath\AdvancedReports\EventTracker.LogSearchParameter.dll")
    $datapersist = [System.Reflection.Assembly]::LoadFrom("$etpath\AdvancedReports\EventTracker.Report.DataPersistance.dll")
#Perform search for event id 3208,3209 and source Eventtracker 9#
$logparmeter01 = New-Object Prism.LogSearchParameter.AdvanceParameter
$logparmeter02 = New-Object Prism.LogSearchParameter.AdvanceParameter
$logparmeter05 = New-Object Prism.LogSearchParameter.AdvanceParameter
$logcerteria = New-Object Prism.LogSearchParameter.LogSearchParameter
$searchconfig = New-Object Prism.LogSearchParameter.SearchConfig
$searchconfig.IsParseTokens = "False"
$logcerteria.FromDate = (get-date).AddHours($SFREQ)
$logcerteria.ToDate = (get-date)
#$logcerteria.SystemGroups = "Servers"
$logcerteria.SystemIncludeType = 1
$logparmeter01.ParameterId = 0
$logparmeter01.Operator = 1
$logparmeter01.ParameterName = "event_id"
$logparmeter01.ParameterType = 1
$logparmeter01.SearchValue = "3208,3209"
$logparmeter02.ParameterId = 0
$logparmeter02.Operator = 1
$logparmeter02.ParameterName = "event_source"
$logparmeter02.ParameterType = 1
$logparmeter02.SearchValue = "EventTracker"
$logcerteria.AdvancedParameter = $logparmeter01
$logcerteria.AdvancedParameter += $logparmeter02
$logticks = (get-date).Ticks
$mdbname1 = "CVEAnalysis_{0}" -f $logticks
$param = new-object Prism.LogSearchParameter.LogSearchParameterContext ("$mdbname1")
$param.Update($logcerteria)
$search = new-object Prism.LogSearchProcess.LogSearchProcessing ("$mdbname1")
$search.StartProcessing(4) | Out-Null
########################################################################################################################################

#Extract useful values from event_description and store in Temp folder#
$regex2 = 'Detected software \<(.*?)\> has been ((un)?installed)\s+'
Filter Extract2 {
$_.event_description -match $regex2 > $null
[pscustomobject]@{  
EventTime = $_.event_datetime
SystemName = $_.event_computer
UserName = $_.event_user_name
UserDomain = $_.event_user_domain
ApplicationName = ($Matches[1]).trim()
ApplicationStatus = ($Matches[2]).trim()
}}

$mdblocation1 = "$etpath\Reports\LogSearch\$mdbname1.mdb"
$query1 = (Invoke-MDBSQLCMD $mdblocation1 -sqlquery "Select event_datetime,event_computer,event_user_name,event_user_domain,event_description from Events" | Extract2)
$result = ($query1 | Select-Object -Property EventTime,SystemName,UserName,UserDomain,ApplicationName,ApplicationStatus) 
}

$result1 =  ((($result | Where-Object {($_.ApplicationName -notmatch "\(KB\d+\)")}) | Group-Object -Property ApplicationName) | Select-Object -Property @{Name="SoftwareName"; Expression = {$_.Name}},@{Name="SoftwareStatuses"; Expression = {($_.Group.ApplicationStatus | select -Unique) -join '|'}},@{Name="Workstations"; Expression = {($_.Group.SystemName | select -Unique) -join '|'}},@{Name="UserNames"; Expression = {($_.Group.UserName | select -Unique) -join '|'}})
$result1 | Export-Csv -Path "$temppath\o1.csv" -NoTypeInformation

########################################################################################################################################

#Perform VT checks on the exported hashes and store in Temp folder#
$result2 = ((($result1).SoftwareName) | %{$_ -replace '(?i)(64|32).bit.',"" -replace '.x(86|64).',""}).trim()
$result2 | foreach{
$sw = $_
$sw -match '^(\S+)(\s+([^\d\.\-]+).*?)?((\s+|\()([\d\.]+).*?)?$' >$null
$vendor = $matches[1].trim()
$product = $matches[3].trim()
$version = $matches[6].trim()

$params = @{uri = "https://cve.circl.lu/api/search/$vendor";
            Method = 'Get';
            Headers = @{Authorization = 'Basic'; 
                        User = "password123"} 
   }

$query = invoke-restmethod @params
$result3 = (($query.data) | Where-Object {($_.cvss -ge $score) -and ($_.summary -match "$product" -or $_.summary -match "$version")}) | select -Property @{name="SoftwareName";expression={$($sw)}},@{name="CVSSScore";expression={$($_.cvss)}},@{name="CVEID";expression={$($_.id)}},@{name="CVEDetails";expression={$($_.summary)}}

$result3 | Export-Csv -Path "$temppath\o2.csv" -NoTypeInformation -Append
}
########################################################################################################################################

#Join outputs of Temp folder to create consolidated csv report#
$dt = Get-Date -Format MMddyyy_HHmmss
$fname= "CVEReport_{0}_{1}" -f $dt,$CNAME

$f1= Import-Csv -Path "$temppath\o2.csv" | select *,SoftwareStatuses,Workstations,UserNames
$f2= Import-Csv -Path "$temppath\o1.csv"
$f1 | %{
      $samname=$_.SoftwareName
      $m=$f2|?{$_.SoftwareName -eq $samname}
      $_.SoftwareStatuses=$m.SoftwareStatuses
      $_.Workstations=$m.Workstations
      $_.UserNames=$m.UserNames
       }

($f1 | Select-Object SoftwareName,SoftwareStatuses,Workstations,UserNames,CVSSScore,CVEID,CVEDetails) | Export-Csv -Path "$backuppath\$fname.csv" -NoTypeInformation

########################################################################################################################################

$final = Import-csv -Path "$backuppath\$fname.csv"
$df = Get-Date -Format G
$evcount =  ($final|Measure-Object).count

If ($evcount -ge 1){

$Head = @'
<link href="http://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css" rel="stylesheet">   
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
<link rel="stylesheet" 
href="http://cdn.datatables.net/1.10.2/css/jquery.dataTables.min.css"></style>
<script type="text/javascript" 
src="http://cdn.datatables.net/1.10.2/js/jquery.dataTables.min.js"></script>
<script type="text/javascript" 
src="http://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
<script>
$(document).ready(function(){
    $('#myTable').dataTable();
});
</script>
<style type="text/css">
  html,
   .caption {
  padding: 10px 10px;
  color: black;
  font-weight: bold;
  text-align: left;
  font-size:x-large;  
   }
table {
  width: 800px;
  overflow: hidden;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
  white-space: nowrap;
  border:none;
  border-collapse: collapse;
}

th {
    border-left: 1px solid #000;
    border-right: 1px solid #000;
    color: black;
    font-size:large;
}

td {
    border-left: 1px solid #000;
    border-right: 1px solid #000;
    font-size:medium;
    font-weight: normal;
}
</style>
'@
$Title = @"
<div class="caption"><font size="20">Install/Uninstall CVE Report $cname $df</font></div>
"@

$body = $final

########################################################################################################################################
((($body | ConvertTo-Html -Head $Head -PreContent $Title).replace('<colgroup><col/><col/><col/><col/><col/><col/><col/></colgroup>',"").replace('<table>','<div class="table-responsive"><table id="myTable" class="display table" width="100%"><thead>').replace('</table>','</tbody></table></div>').replace('<th>CVEDetails</th></tr>','<th>CVEDetails</th></tr></thead><tbody>')) | foreach {$_.replace("&lt;","<").replace("&gt;",">").replace("&quot;",'"')} | ForEach-Object {
$_ -replace '\<td\>([0-3]\.\d+)\<\/td\>','<td style="background-color: #00c400"><center><b>$1</b></center></td>' -replace '\<td\>([4-6]\.\d+)\<\/td\>','<td style="background-color: #ffcc00"><center><b>$1</b></center></td>' -replace '\<td\>([7-8]\.\d+)\<\/td\>','<td style="background-color: #ff8000"><center><b>$1</b></center></td>' -replace '\<td\>(9\.\d+)\<\/td\>','<td style="background-color: #ff0000"><center><b>$1</b></center></td>' -replace '\<td\>(10\.\d+)\<\/td\>','<td style="background-color: #ff0000"><center><b>$1</b></center></td>'
})| Out-File "$outputpath\$fname.html"
}
        